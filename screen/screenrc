
escape ^t^t
defscrollback 10000

# don't show startup message.
startup_message off

autodetach on

defutf8 on
defkanji utf-8
encoding utf-8 utf-8
defencoding utf-8

multiuser on
vbell off
vbell_msg "Bell"
startup_message off
mousetrack on

defflow off
crlf off

## current command name as window name
shelltitle "$ |bash"
#term xterm-256color
#term screen-256color
term screen.xterm-256color
attrcolor b ".I"
# enable background-color-erase setting.
#defbce on
shell $SHELL
#termcapinfo xterm* 'Co#256:AB=\E[48;5;%dm:AF=\E[38;5;%dm'
#termcap * 'G0:S0=\E(%.:E0=\E(B:TY=iso2022'
#termcapinfo xterm* ti@:te@

cjkwidth on

#zombie "q^M"
#bind d setenv DISPLAY
bind w windowlist -b
#bind r eval 'echo "Resize window"' 'command -c resize'
#bind o focus
#bind ^O focus
#bind -c REGION 2 split
#bind -c REGION 1 only
#bind -c REGION 0 remove
#bind -c REGION o focus
#bind ^X command -c REGION
#bind ^N next
#bind ^P prev
#bind ^U encoding utf8
#bind ^E encoding euc
bind ^Q quit
#bind R colon "screen ssh ^b^b"
#bind P colon "^p"
#bind ^K kill

#-- window select
#bindkey -k k1 select 1
#bindkey -k k2 select 2
#bindkey -k k3 select 3
#bindkey -k k4 select 4
#bindkey -k k5 select 5
#bindkey -k k6 select 6
#bindkey -k k7 select 7
#bindkey -k k8 select 8
#bindkey -k k9 select 9
#bindkey -k k; select 10

# Continuous window change
bind ^n eval 'command -c window' 'next'
bind ^p eval 'command -c window' 'prev'
bind -c window  n eval 'next'
bind -c window  p eval 'prev'
bind -c window ^n eval 'command -c window' 'next'
bind -c window ^p eval 'command -c window' 'prev'
bind -c window ^q eval 'command -c window'

#-- layout
bind V split -v
bind S split

# Focus (like vi)
bind  h eval 'focus left'
bind  j eval 'focus down'
bind  k eval 'focus up'
bind  l eval 'focus right'
bind ^h eval 'focus left'
bind ^j eval 'focus down'
bind ^k eval 'focus up'
bind ^l eval 'focus right'
bind -k kb eval 'focus left' #Backspace

bind -c resize ^]  command
#-- Resize window
bind e  eval 'command -c resize' 'echo "Resize window"'
bind ^e eval 'command -c resize' 'echo "Resize window"'
bind -c resize  h eval 'command -c resize' 'resize -h -1'
bind -c resize  l eval 'command -c resize' 'resize -h +1'
bind -c resize  j eval 'command -c resize' 'resize -v +1'
bind -c resize  k eval 'command -c resize' 'resize -v -1'
bind -c resize ^h eval 'command -c resize' 'resize -h -1'
bind -c resize ^l eval 'command -c resize' 'resize -h +1'
bind -c resize ^j eval 'command -c resize' 'resize -v +1'
bind -c resize ^k eval 'command -c resize' 'resize -v -1'

# window re-numbering
# override default `N'(number) mapping
bind N colon 'number '

#-- layout
# trigger for layout sub-commands
bind ^Y eval 'command -c layout' 'layout show'
bind  y eval 'command -c layout' 'layout show'

# create/remove layout
bind -c layout c eval 'layout new'    'layout show'
bind -c layout X eval 'layout remove' 'layout show'

# change the current layout title or number
bind -c layout A colon 'layout title '
bind -c layout N colon 'layout number '

# switch to the layout identified by number or title (not prefix of a title)
bind -c layout \' eval 'layout select' 'layout show'

# switch to other layout
bind -c layout n eval 'layout next'     'layout show'
bind -c layout p eval 'layout prev'     'layout show'
bind -c layout 0 eval 'layout select 0' 'layout show'
bind -c layout 1 eval 'layout select 1' 'layout show'
bind -c layout 2 eval 'layout select 2' 'layout show'
bind -c layout 3 eval 'layout select 3' 'layout show'
bind -c layout 4 eval 'layout select 4' 'layout show'
bind -c layout 5 eval 'layout select 5' 'layout show'
bind -c layout 6 eval 'layout select 6' 'layout show'
bind -c layout 7 eval 'layout select 7' 'layout show'
bind -c layout 8 eval 'layout select 8' 'layout show'
bind -c layout 9 eval 'layout select 9' 'layout show'

# continuous switch to other layout
bind -c layout ^N eval 'layout next' 'command -c layout' 'layout show'
bind -c layout ^P eval 'layout prev' 'command -c layout' 'layout show'

windowlist title '%{u .g} Num Flags Title%='
windowlist string '%4n %{.y}%f%09=%{-} %t %='

#rendition bell | monitor | silence | so attr [color]
rendition bell    '=ub' 'yk'
rendition monitor '=b'  'BW'
rendition silence '=u'  '.w'
rendition so      '=d'  'Kw'
#rendition so       =00

defmonitor on
defsilence on

# caption string description:
setenv a ""
setenv a "$a%?%F"          # if the window has the focus
setenv a "$a%{=du Kw}"     #     bg:black fg:white underline
setenv a "$a%:"            # else
setenv a "$a%{=d kg}"      #     bg:white fg:
setenv a "$a%?"            # endif

#setenv a "$a%-w"           # window list: start----------------------------
setenv a "$a%?%F"          # if the window has the focus
setenv a "$a%{=db bw}"     #     bg:blue fg: bold
setenv a "$a%:"            # else
setenv a "$a%{=d kg}"      #     bg:white fg:black
setenv a "$a%?"            # endif
setenv a "$a%?%P"          # if copy/paste mode
setenv a "$a%{=d Gw}"      #     bg:Green fg:white
setenv a "$a%?"            # end if
setenv a "$a "             # space
setenv a "$a%n %t"         # window number & title
setenv a "$a "             # space
setenv a "$a%{-}"          #
setenv a "$a%L="           # Mark the position for the next truncation
setenv a "$a "             # space
setenv a "$a%h"            # window' hardstatus
setenv a "$a%L>"           # Truncate %L= ~ %L>,  gives marks at the truncation point
#setenv a "$a%+w"           # window list: last-----------------------------

setenv a "$a%="            # With the last %-0=, right alignment for following lines
setenv a "$a%?%P"          # if copy/paste mode
setenv a "$a*copy/paste* " #     draw this sentence
setenv a "$a%?"            # end if
setenv a "$a%?%E"          # if copy/paste mode
setenv a "$a*command* "    #     draw this sentence
setenv a "$a%?"            # end if

setenv a "$a%?%F"          # if the window has the focus
setenv a "$a%-14="          #     last 14-char
setenv a "$a%:"            # else
setenv a "$a%-0="          #     last 0-char
setenv a "$a%?"            # endif
setenv a "$a%{=dub kw}"    # bg:black fg:green
setenv a "$a%02c:%s"       # clock
setenv a "$a "             # space
setenv a "$a%m/%d"         # Calender
caption always "$a"
unsetenv a

# hardstatus string description:
setenv a ""                # 
setenv a "$a%{=u .y}"      # bg:. fg:yellow
setenv a "$a%S"            # session
#setenv a "$a%H"            # hostname
setenv a "$a "             # 
setenv a "$a%L="           # 
setenv a "$a%{=u .c}"      # bg:. fg:blue
setenv a "$a%-w"           # window list: start----------------------------
setenv a "$a%46>"          # 
setenv a "$a%{=urb .c}"    # bg:. fg:red reverce
setenv a "$a%n %t"         # 現在のwindow番号・タイトル
setenv a "$a%{=u .c}"      # bg:. fg:blue
setenv a "$a%+w"           # window list: last-----------------------------
setenv a "$a%-16="         # 
setenv a "$a%{=u .y}"      # bg:. fg:yellow
setenv a "$a[%l]"          # load average
#hardstatus alwaysfirstline "$a"
hardstatus alwayslastline "$a"
unsetenv a
hardstatus off

